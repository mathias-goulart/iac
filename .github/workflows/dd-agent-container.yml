name: Docker Build and Publish

on:
  push:
    branches: [ "main" ]

jobs:
  build_and_publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - uses: jitterbit/get-changed-files@v1
      id: list_changes
      with:
        format: space-delimited
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check for Dockerfile changes
      id: dockerfile_changes
      run: |
        files="${{ steps.list_changes.outputs.modified }}"
        changed=FALSE
        for file in $files
        do
            if grep -q "dd_agent/" <<< "$file"; then
                changed=TRUE
                break
            fi
        done
        echo "changed=$changed" >> $GITHUB_OUTPUT

    - name: Get version from VERSION.md
      id: version
      run: echo "version=$(cat dd_agent/VERSION.md)" >> $GITHUB_OUTPUT

    - name: Build Docker image
      if: steps.dockerfile_changes.outputs.changed == 'TRUE'
      run: |
        cd dd_agent
        docker buildx build --file Dockerfile -t ghcr.io/${{ github.repository }}/dd_agent:${{ steps.version.outputs.version }} .

    - name: Log in to GitHub Container Registry
      if: steps.dockerfile_changes.outputs.changed == 'TRUE'
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker image to GitHub Container Registry
      if: steps.dockerfile_changes.outputs.changed == 'TRUE'
      run: |
        sudo apt install -y jq

        image_list="$(docker image ls -a --format json)"
        image_name="ghcr.io/${{ github.repository }}/dd_agent"
        desired_tag="${{ steps.version.outputs.version }}"

        # Parse the JSON data and check if the desired image and tag exist
        image_found=$(echo "$image_list" | jq -r "select(.Repository == \"$image_name\" and .Tag == \"$desired_tag\")")

        if [[ ! -z "$image_found" ]]; then
            echo "Docker image $image_name with tag $desired_tag found."
            docker push ghcr.io/${{ github.repository }}/dd_agent:${{ steps.version.outputs.version }}
        else
            echo "Docker image $image_name with tag $desired_tag not found."
        fi  
        