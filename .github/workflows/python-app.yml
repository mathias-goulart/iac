# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions: write-all

jobs:
  build_and_publish:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Check for changes in the script
      id: pythonscript_changes
      run: echo "changed=$(git diff --name-only ${{ github.base_ref }}..${{ github.sha }} | grep '^dd_agent/install_datadog_agent.py$' || true)" >> $GITHUB_OUTPUT

    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"

    - name: Install dependencies
      if: steps.pythonscript_changes.outputs.changed == 'dd_agent/install_datadog_agent.py'
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Get version from VERSION.md
      id: get_version
      run: |
        cd dd_agent
        echo "version=$(cat VERSION.md)" >> $GITHUB_OUTPUT

    - name: Build Script
      if: steps.pythonscript_changes.outputs.changed == 'dd_agent/install_datadog_agent.py'
      run: |
        cd dd_agent
        pyinstaller --onefile install_datadog_agent.py
    
    - name: Read release notes from release.md
      if: steps.pythonscript_changes.outputs.changed == 'dd_agent/install_datadog_agent.py'
      id: get_release_notes
      run: |
        RELEASE_NOTES=$(cat dd_agent/release.md)
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create release
      id: create_release
      if: steps.pythonscript_changes.outputs.changed == 'dd_agent/install_datadog_agent.py'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        body: |
          ${{ env.RELEASE_NOTES }}

    - name: Upload script to new release
      id: upload-to-new-release-asset
      if: steps.pythonscript_changes.outputs.changed == 'dd_agent/install_datadog_agent.py'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dd_agent/dist/install_datadog_agent  # Update with the correct path to the compiled script
        asset_name: install_datadog_agent
        asset_content_type: application/octet-stream